version: '2.1'
services:
  reader:
    image: reader
    build:
      context: ../../
      dockerfile: ./build/reader.Dockerfile
    container_name: reader
    depends_on:
      story-http: { condition: service_started }
      chapter-http: { condition: service_started }
      elasticsearch: { condition: service_healthy }
  story-http:
    image: story-http
    build:
      context: ../../
      dockerfile: ./build/story-http.Dockerfile
    container_name: story-http
    environment:
      - STORY_GRPC_SERVICE_HOSTNAME=story-grpc
      - STORY_GRPC_SERVICE_PORT=3000
      - STORY_HTTP_SERVICE_PORT=8080
    depends_on:
      story-grpc: { condition: service_started }
      elasticsearch: { condition: service_healthy }

  chapter-http:
    image: chapter-http
    build:
      context: ../../
      dockerfile: ./build/chapter-http.Dockerfile
    container_name: chapter-http
    environment:
      - CHAPTER_GRPC_SERVICE_HOSTNAME=chapter-grpc
      - CHAPTER_GRPC_SERVICE_PORT=3000
      - CHAPTER_HTTP_SERVICE_PORT=8080
    depends_on:
      chapter-grpc: { condition: service_started }
      elasticsearch: { condition: service_healthy }
      
  story-grpc:
    image: story-grpc
    build:
      context: ../../
      dockerfile: ./build/story-grpc.Dockerfile
    container_name: story-grpc
    environment:
      - SCRAPER_GRPC_SERVICE_HOSTNAME=scraper-grpc
      - SCRAPER_GRPC_SERVICE_PORT=3000
      - STORY_DB_STRING=postgresql://story_service@cockroach:26257/reader?sslmode=disable
    depends_on:
      cockroach: { condition: service_started }
      scraper-grpc: { condition: service_started }
      elasticsearch: { condition: service_healthy }
  chapter-grpc:
    image: chapter-grpc
    build:
      context: ../../
      dockerfile: ./build/chapter-grpc.Dockerfile
    container_name: chapter-grpc
    environment:
      - SCRAPER_GRPC_SERVICE_HOSTNAME=scraper-grpc
      - SCRAPER_GRPC_SERVICE_PORT=3000
      - STORY_GRPC_SERVICE_HOSTNAME=story-grpc
      - STORY_GRPC_SERVICE_PORT=3000
      - CHAPTER_DB_STRING=postgresql://chapter_service@cockroach:26257/reader?sslmode=disable
    depends_on:
      cockroach: { condition: service_started }
      scraper-grpc: { condition: service_started }
      story-grpc: { condition: service_started }
      elasticsearch: { condition: service_healthy }
  scraper-grpc:
    image: scraper-grpc
    build:
      context: ../../
      dockerfile: ./build/scraper-grpc.Dockerfile
    container_name: scraper-grpc
  cockroach:
    image: cockroachdb/cockroach:v2.0.5
    command: start --insecure
    container_name: cockroach
    volumes:
      - ./cockroach-data/cockroach:/cockroach/cockroach-data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  cockroach-init:
    image: cockroach-init
    build:
      context: ../../
      dockerfile: ./build/cockroach-init.Dockerfile
    entrypoint: /cockroach/cr-init.sh
    container_name: cockroach-init
    depends_on:
      cockroach: { condition: service_started }
    environment:
      - COCKROACH_HOSTNAME=cockroach
  elasticsearch:
    image: elasticsearch
    build:
      context: ../../
      dockerfile: ./build/elasticsearch.Dockerfile
    container_name: elasticsearch
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    healthcheck:
      test: ["CMD", "curl","-s" ,"-f", "http://localhost:9200/_cat/health"]
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
  logstash:
    image: logstash
    build:
      context: ../../
      dockerfile: ./build/logstash.Dockerfile
    container_name: logstash
    volumes:
      - lsdata:/usr/share/logstash/pipeline
    ports:
      - "5000:5000"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      elasticsearch: { condition: service_healthy }
  kibana:
    container_name: kibana
    hostname: kibana
    image: "docker.elastic.co/kibana/kibana:6.4.0"
    depends_on:
      elasticsearch: { condition: service_healthy }
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:5601/login"]
      retries: 6
    ports:
      - 5601:5601
  reverse-proxy:
    image: nginx-rproxy
    container_name: nginx-rproxy
    restart: always
    ports:
      - 80:80
    depends_on:
      reader: { condition: service_started }
      story-http: { condition: service_started }
      chapter-http: { condition: service_started }
      cockroach: { condition: service_started }
volumes:
  esdata:
    driver: local
  lsdata:
    driver: local